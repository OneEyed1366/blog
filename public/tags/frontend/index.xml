<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>frontend on </title>
    <link>https://oneeyed1366.github.io/blog/tags/frontend/</link>
    <description>Recent content in frontend on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <lastBuildDate>Fri, 07 Oct 2022 18:05:41 +0300</lastBuildDate><atom:link href="https://oneeyed1366.github.io/blog/tags/frontend/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>По поводу тестирования...</title>
      <link>https://oneeyed1366.github.io/blog/posts/2022-10-07-thoughts-about-tests/</link>
      <pubDate>Fri, 07 Oct 2022 18:05:41 +0300</pubDate>
      
      <guid>https://oneeyed1366.github.io/blog/posts/2022-10-07-thoughts-about-tests/</guid>
      <description>Тесты есть? А если найду?? Рано или поздно каждый разраб слышит фразу: &amp;ldquo;Хороший код должен быть покрыт тестами&amp;rdquo;. И вроде бы все логично: чем сложнее приложение, тем сложнее контролировать все его нюансы и взаимосвязи.
Значит, нужно &amp;ldquo;научить&amp;rdquo; какого-то исполнителя в вакууме тестировать то, что ты (или не ты) написал в своем СУПЕР-МЕГА-ПРИЛОЖЕНИИ-ЗА-ОВЕР-ДОХРЕНА-ДЕНЕГ-В-НАНОСЕКУНДУ!
Ниже бегло рассмотрим пару-тройку сходу пришедших на ум инструментов (ибо разрабы, будучи людьми прогрессивными &amp;mdash;читать _ЛЕНИВЫМИ_&amp;mdash; уже придумали довольно много инструментов, которые позволяют эту проблему решить.</description>
      <content>&lt;h2 id=&#34;тесты-есть-а-если-найду&#34;&gt;Тесты есть? А если найду??&lt;/h2&gt;
&lt;p&gt;Рано или поздно каждый разраб слышит фразу: &amp;ldquo;Хороший код должен быть покрыт тестами&amp;rdquo;.
И вроде бы все логично: чем сложнее приложение, тем сложнее контролировать все его нюансы и взаимосвязи.&lt;/p&gt;
&lt;p&gt;Значит, нужно &amp;ldquo;научить&amp;rdquo; какого-то исполнителя в вакууме тестировать то, что ты (или не ты)
написал в своем СУПЕР-МЕГА-ПРИЛОЖЕНИИ-ЗА-ОВЕР-ДОХРЕНА-ДЕНЕГ-В-НАНОСЕКУНДУ!&lt;/p&gt;
&lt;p&gt;Ниже бегло рассмотрим пару-тройку сходу пришедших на ум инструментов
(ибо разрабы, будучи людьми &lt;code&gt;прогрессивными&lt;/code&gt; &amp;mdash;читать &lt;code&gt;_ЛЕНИВЫМИ_&lt;/code&gt;&amp;mdash; уже придумали довольно
много инструментов, которые позволяют эту проблему решить.)&lt;/p&gt;
&lt;h3 id=&#34;список-костылей-карл-кос-ты-лей-инструментов-навскидку&#34;&gt;Список (&lt;strong&gt;Костылей, Карл. КОС-ТЫ-ЛЕЙ&lt;/strong&gt;) инструментов, навскидку&lt;/h3&gt;
&lt;h4 id=&#34;jesthttpsjestjsio&#34;&gt;&lt;a href=&#34;https://jestjs.io/&#34;&gt;Jest&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Являясь одним из самых популярных инструментов для тестирования, негласно считается
&amp;ldquo;королем&amp;rdquo; среди Enterprise-приложений (но это не точно)
Применяется как для &lt;code&gt;Unit&lt;/code&gt;, так и для &lt;code&gt;Component&lt;/code&gt; тестирования.
Можно применять и для &lt;code&gt;Интеграционного&lt;/code&gt; тестирования, но там уже &lt;code&gt;немножко больно&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(
Ловит въетнамские флэшбэки и вспоминает проекты, которые делали &lt;em&gt;E2E&lt;/em&gt; тесты на Jest&amp;rsquo;e&amp;hellip;
&lt;strong&gt;Автор ушел пить кофе и рефлексировать, что раньше код был чище, а трава &amp;ndash; зеленей&lt;/strong&gt;
)&lt;/p&gt;
&lt;p&gt;Плюсы:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Легче интергрируется с &lt;a href=&#34;https://testing-library.com/docs/react-testing-library/intro/&#34;&gt;React-testing-library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Хорошая дока, которая позволит тебе в моменте посмотреть, где и что ты не туда запихал&lt;/li&gt;
&lt;li&gt;Jest - лапочка, который легко и непринужденно вливается в любой проект (Не то, что я. &lt;em&gt;ПЛАЧЕТ&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Довольно шустро крутит (твои планы на пятничный вечер) все, что ты в него запихаешь&lt;/li&gt;
&lt;li&gt;Имеет богатую экосистему плагинов и расширений практически* под любой framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Минусы:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Шаг влево\вправо - расстрел&amp;rdquo;
(иногда банально настроить &lt;em&gt;pre-commit&lt;/em&gt; - целый квест со случайно выпадающими гачи-микс сценами)&lt;/li&gt;
&lt;li&gt;Е**нутая логика итерации по массиву&lt;/li&gt;
&lt;li&gt;Залез в конфиги - пеняй на себя (особенно, если ты вообще не сечёшь, что и НАФИГА ты делаешь)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mochahttpsmochajsorg--chaihttpswwwchaijscom&#34;&gt;&lt;a href=&#34;https://mochajs.org/&#34;&gt;Mocha&lt;/a&gt; + &lt;a href=&#34;https://www.chaijs.com/&#34;&gt;Chai&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&amp;ldquo;Бонни и Клайд&amp;rdquo; в мире тестирования Web SPA приложений.
Долго и упорно наступают на пятки &amp;ldquo;мастодонту&amp;rdquo; в лице Jest&amp;rsquo;а.&lt;/p&gt;
&lt;p&gt;Применяются также для &lt;code&gt;Unit&lt;/code&gt;, &lt;code&gt;Component&lt;/code&gt; &amp;amp; &lt;code&gt;Интеграционного&lt;/code&gt; тестирования.&lt;/p&gt;
&lt;p&gt;Большой плюс: &lt;em&gt;Интеграционное&lt;/em&gt; тестирование легче масштабируется
(понятный большинству пример: сравните количество boilerplate&amp;rsquo;а у ванильного
&lt;a href=&#34;https://redux.js.org/&#34;&gt;&lt;em&gt;Redux&lt;/em&gt;&lt;/a&gt;
&amp;amp;
&lt;a href=&#34;https://mobx.js.org/&#34;&gt;&lt;em&gt;MobX&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Плюсы:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Вроде как легче интегрироваться с экосистемой Vue2
(за 3 версию не скажу, ибо щупал, но поверхностно)&lt;/li&gt;
&lt;li&gt;Легче Jest&amp;rsquo;а, и имеет чуть более читабельный синтаксис
(сугубо на вкус Автора)&lt;/li&gt;
&lt;li&gt;На удивление шустрые ребята, которые могут сэкономить вам 2-3 секунды суровой
кодерской жизни (&amp;ldquo;Плюсовики&amp;rdquo; дружно одобряют)&lt;/li&gt;
&lt;li&gt;Также богатая экосистема позволяет превратить эту почти невинную парочку
в адский комбайн, который будет тестировать всё, вся, и в первую очередь
нервы вашего ПМ&amp;rsquo;а
(
когда его в 100500 раз вызовут на ковер с целью объяснить,
нахрена вы потратили 2 спринта &amp;ldquo;на увеличение отказоустойчивости приложения&amp;rdquo;,
если пришел очередной &amp;ldquo;chaotic-джун&amp;rdquo; и уронил production
)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Минусы:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Angular? Не, не слышал *^-^*&lt;/li&gt;
&lt;li&gt;Подробная, но чутка переусложненная дока может вогнать в ступор,
а сразу после в неистовейшее ЖЕЛАНИЕ пойти поиграть с Jest&amp;rsquo;ом&lt;/li&gt;
&lt;li&gt;При обвешивании плагинами, становятся тяжелее Jest&amp;rsquo;а&lt;/li&gt;
&lt;li&gt;Mocha без Chai, что Нацу без Хэппи. Жить можно, но грустно.
(Да и, как-бы, НАФИГА?!)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;cypresshttpsdocscypressioguidesoverviewwhy-cypresswhat-you-ll-learn&#34;&gt;&lt;a href=&#34;https://docs.cypress.io/guides/overview/why-cypress#What-you-ll-learn&#34;&gt;Cypress&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&amp;ldquo;И вот, на 3 день!..&amp;rdquo;
Ладно-ладно, интригу нагнал, теперь можно и пояснить.&lt;/p&gt;
&lt;p&gt;Плюсы:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Одно слово: ДОКА. Почитай, ты все поймешь&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Клёвый, модный, молодежный&amp;rdquo; инструмент, который хочет привнести в этот серый и скучный
мир QA немножко удобства и магии (&amp;ldquo;Плюсовики&amp;rdquo; дружно сделали страшную морду).&lt;/li&gt;
&lt;li&gt;Почти безупречно подходит для большинства DEV QA сценариев
(у матерых QA&amp;rsquo;щиков уже свой, потом и кровью выстраданный набор &amp;ldquo;костылей&amp;rdquo;),
часто используется для &lt;code&gt;Component&lt;/code&gt;, &lt;code&gt;Интеграционного&lt;/code&gt; &amp;amp; &lt;code&gt;E2E&lt;/code&gt; тестирования.&lt;/li&gt;
&lt;li&gt;Из коробки (с какой-то бородатой версии) дает тебе красивый и, что важнее,
ТЫКАТЕЛЬНЫЙ UI, которым просто пользоваться.&lt;/li&gt;
&lt;li&gt;Если ты (как и я) странный человек, который использует форки Chromium&amp;rsquo;а,
то для таких &amp;ldquo;одаренных&amp;rdquo; тут также есть &lt;code&gt;Electron&lt;/code&gt;, для прогона тестов внутри него.
У-Удобно&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Минусы:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Тяжелый, перед первым запуском, по сути, &lt;code&gt;требует установки отдельного Cypress приложения&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Тяжело вливается в &lt;em&gt;Unit&lt;/em&gt; тестирование (хотя может)&lt;/li&gt;
&lt;li&gt;В зависимости от framework&amp;rsquo;а, при &lt;em&gt;Component&lt;/em&gt; тестироовании можно не раз (и нифига не два)
стабильно стрелять себе в колено. Не из дробовика, но все же&lt;/li&gt;
&lt;li&gt;Имеет свой, &amp;ldquo;Chai-подобный&amp;rdquo; синтаксис, что усложняет переезд на него (в случае необходимости)&lt;/li&gt;
&lt;li&gt;jQuery! Напугал? Это хорошо, ибо бывают сценарии, когда он НУЖОН.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;интересная-штучка-но-есть-ли-у-неё-практическое-применение&#34;&gt;&amp;ldquo;Интересная штучка, но есть-ли у неё практическое применение?&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;Итак, мы бегло посмотрели на &amp;ldquo;главных игроков&amp;rdquo; QA-рынка
(в моих бредовых фантазиях. Да-да, санитары уже выехали),
но раз инструменты - есть, потребность - есть, то почему все эти
&lt;a href=&#34;https://habr.com/ru/company/ruvds/blog/450316/&#34;&gt;TDD&lt;/a&gt;,
&lt;a href=&#34;https://ru.wikipedia.org/wiki/BDD_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)&#34;&gt;BDD&lt;/a&gt;
и прочее еще не стали мейнстримом?&lt;/p&gt;
&lt;p&gt;(Оффтоп: если стало - сорян, автор в танке и пошел выпить &lt;em&gt;йаду&lt;/em&gt;. Дальше лучше не читать)&lt;/p&gt;
&lt;p&gt;По моему опыту, проблема всегда плюс-минус одна: &lt;strong&gt;ДОРОГО&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;почему-дорого&#34;&gt;Почему дорого?&lt;/h3&gt;
&lt;p&gt;Потому что бизнес не очень любит кидаться в людей деньгами (ВНЕЗАПНО!),
и для него &lt;strong&gt;оптимизация&lt;/strong&gt; - слово покруче, чем &lt;strong&gt;библия&lt;/strong&gt; для верующего.&lt;/p&gt;
&lt;p&gt;(Мой агностик идет разбирацца, где это я таких слов понабрался)&lt;/p&gt;
&lt;p&gt;Если вкратце, то на момент 2K22 разрабы - это дорого, а содержать
команду разрабов - это вообще дофига дорого.
Scrum, Agile, и вот эту вот всю &amp;ldquo;движуху&amp;rdquo; не от хорошей жизни придумали.&lt;/p&gt;
&lt;p&gt;Так а все-таки, почему именно &lt;strong&gt;Дорого?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Потому что писать тесты - долго.
Да, условный Cypress пытается решить эту проблему (в мире Frontend&amp;rsquo;a), но все равно -
бизнес каждый раз оказывается перед выбором:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Сделать новую супер-пупер-свистящую фичу?&lt;/li&gt;
&lt;li&gt;Покрыть приложени тестами?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Догадайтесь, что выбирают чаще.&lt;/p&gt;
&lt;h2 id=&#34;но-ведь-на-дистанции-все-равно-ведь-дешевле-содержать-с-тестами-разве-нет&#34;&gt;Но ведь на дистанции все-равно ведь дешевле содержать с тестами, разве нет?&lt;/h2&gt;
&lt;p&gt;Ответ - &lt;strong&gt;безусловно&lt;/strong&gt;, но:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Если эти тесты писал тот, кто УМЕЕТ ПИСАТЬ ТЕСТЫ.&lt;/li&gt;
&lt;li&gt;Если у бизнеса есть на это ДЕНЬГИ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;А теперь, давайте по пунктам:&lt;/p&gt;
&lt;h3 id=&#34;что-значит-уметь-писать-тесты&#34;&gt;Что значит: уметь писать тесты?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Тесты замедляют &amp;ldquo;ржавение&amp;rdquo; кода&lt;/li&gt;
&lt;li&gt;Тесты тестируют то, что НАДО тестировать&lt;/li&gt;
&lt;li&gt;Тесты частично снимают с условного Лида задачу по постоянному надзору за &amp;ldquo;chaotic-джунами&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Тесты (с некоторыми ограничениями) выполняют функцию Доки по проекту (для разрабов!)&lt;/li&gt;
&lt;li&gt;Тесты с определенным процентом успеха не пускают кривой код в production (ВНЕЗАПНО №2)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;что-значит-у-бизнеса-есть-на-это-деньги&#34;&gt;Что значит: у бизнеса есть на это деньги?&lt;/h3&gt;
&lt;p&gt;Вкратце - то самое и значит.
&amp;ldquo;Кто платит, тот и музыку заказывает&amp;rdquo;, а если инвестор условного стартапа в душе не сечёт,
что и зачем мы там вошкаем как dev-team, то ему с высокой колакольни начхать на всё это &amp;ldquo;ржавение кода на дистанции&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Для условного инвестора важно ЗАРАБОТАТЬ (ВНЕЗАПНОЕ №3)&lt;/p&gt;
&lt;p&gt;Проблемы начинаются, когда условный стартап перестает быть просто &amp;ldquo;очередным стартапом&amp;rdquo;,
и начинает плавно переходить в категорию &amp;ldquo;продуктовой компании&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Причина? Привычка.&lt;/p&gt;
&lt;h2 id=&#34;привычка&#34;&gt;Привычка?&lt;/h2&gt;
&lt;p&gt;Привычка.&lt;/p&gt;
&lt;p&gt;Привычка просто имплементировать фичи, и закрывать 100500 тасок в секунду
(и плевать, что отвалилась регистрация - починим в моменте, раньше же так делали? Делали. Значит, и сейчас сделаем)&lt;/p&gt;
&lt;p&gt;Привычка тестировать продукт силами самой dev-team или product-team
(в редких случаях - силами qa-team),
ведь &amp;ldquo;вы же сами это написали, и вы говорите, что не можете предугадать, как поведет себя продукт?
Я начинаю сомневаться в вашей компетентности&amp;rdquo; (и еще 1000 классных фраз от новоявленного CEO, CTO, whatever&amp;hellip;)&lt;/p&gt;
&lt;h3 id=&#34;а-потом---суп-с-котом-0_o-&#34;&gt;А потом - суп с котом (0_o ?!)&lt;/h3&gt;
&lt;p&gt;Ладно-ладно, хватит кидаться тапками.
Торжественно клянусь, (&lt;em&gt;что замышляю только шалость&lt;/em&gt;)
что ни одна животинка в ходе написания данного поста не пострадала.
(Комары - не в счёт)&lt;/p&gt;
&lt;p&gt;Суммарно, круг замкнулся. Приложение стало крутым? Стало.&lt;/p&gt;
&lt;p&gt;Приложение разрослось? Разрослось.&lt;/p&gt;
&lt;p&gt;Так а тесты-то где??? А их нету, потому что мы работаем на бизнес (пам-пам),
а бизнесу нужно закрывать отчеты, нанимать персонал, и вот это вот все.&lt;/p&gt;
&lt;h2 id=&#34;а-что-в-итоге&#34;&gt;А что в итоге?&lt;/h2&gt;
&lt;p&gt;По итогу (и по опыту прошлых компаний), если не было абстрактного &amp;ldquo;единорога&amp;rdquo;,
который бы жестко и бескомпромиссно топил за тесты, то возможны 2 пути:&lt;/p&gt;
&lt;h3 id=&#34;андрюха-все-ня-давай-по-новой&#34;&gt;&amp;ldquo;Андрюха, все ***ня. Давай по-новой&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;Идея следующая: условного менеджера высшего звена (тут без сарказма: крутые ребята)
настолько задолбало, что ему из каждого утюга звенят:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;это плохо работает&lt;/li&gt;
&lt;li&gt;это сделать нельзя,&lt;/li&gt;
&lt;li&gt;этот крутой разраб, для появления которого был призван сам Сатана, ушел и плакал кровавыми слезами,
как только увидел код&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;strong&gt;накидываем на вентилятор, накидываем, ну же, активнее&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;Что он принимает волевое решение: отложить какое-то количество денег на глобальную перепись кода.&lt;/p&gt;
&lt;p&gt;Сразу скажу: мне повезло, и я когда-то попал именно на такой путь именно в такой компании,
а потому четко себе представляю, что там &amp;ldquo;за поворотом&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Чаще всего, данный путь выбирают, когда бизнес больше не может расти, ибо обслужиание и поддержание
кодовой базы продукта стоит дороже какого-то выставленного потолка.&lt;/p&gt;
&lt;p&gt;Итог: пан или пропал.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ИЛИ Все круто, и мы могучим рывком все сделали красиво&lt;/li&gt;
&lt;li&gt;ИЛИ Простите, п**дец. Переписывание затянулось, бизнес теряет все больше, а конкуренты счастливы.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;О развязке думайте сами.&lt;/p&gt;
&lt;h3 id=&#34;мягкая-сила-в-действии&#34;&gt;&amp;ldquo;Мягкая сила&amp;rdquo; в действии&lt;/h3&gt;
&lt;p&gt;Идея следующая: под мудрым надзором (&lt;em&gt;Гендальфа&lt;/em&gt;) крутого Лида/Лидов,
начинаются точечные, но конкретные улучшения кода.&lt;/p&gt;
&lt;p&gt;Что-то чистится, что-то выкидывается, что-то просто стабилизируется. Это нормально,
но сразу ремарка - найти лидов, которые могут это стабильно выносить и доносить до
бизнеса ценность - квест похлеще &amp;ldquo;я найду Цири и верну ее домой&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Обычно, это встраивается в процессы организации, и таким нехитрым финтом
еще сильнее замедляется &amp;ldquo;ржавение кода&amp;rdquo;. Когда-то он все-равно произойдет,
но сейчас - мы тут ржавчину убрали, тут подкрасили, тут костылик подставили - круто,
теперь можно и фичу добавить.&lt;/p&gt;
&lt;p&gt;Итог: эволюция/энволюция (тут как повезет).
Из практики, чаще всего начинают именно этот путь, но вот стабильно ему следуют - единицы.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
