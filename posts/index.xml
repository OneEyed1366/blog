<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on</title><link>https://oneeyed1366.github.io/blog/posts/</link><description>Recent content in Posts on</description><generator>Hugo -- gohugo.io</generator><language>ru</language><lastBuildDate>Wed, 12 Oct 2022 14:45:00 +0300</lastBuildDate><atom:link href="https://oneeyed1366.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Въетнамские флэшбэки: Девичья память у React'а (и немножко DotNotation)</title><link>https://oneeyed1366.github.io/blog/posts/2022-10-12-react-interviews-1/</link><pubDate>Wed, 12 Oct 2022 14:45:00 +0300</pubDate><guid>https://oneeyed1366.github.io/blog/posts/2022-10-12-react-interviews-1/</guid><description>Оффтоп Крутые-модные-молодежные Svelte&amp;rsquo;ы, Solid&amp;rsquo;ы, Qwik&amp;rsquo;и и прочее сегодня не рассматриваем, ибо каждый из них топит за свою идеологию и способ работы.
Мы тут сегодня про &amp;ldquo;старпёров&amp;rdquo; (слышит голос вдалеке: &amp;ldquo;Ма, неси таблетки, деда снова накрыло&amp;rdquo;)
Про что поговорим? Про ЁПТИМИЗАЦИЮ (автор хотел, правда хотел написать правильно, но не сдержался)
Шта? &amp;lsquo;ЁПТИМИЗАЦИЯ&amp;rsquo;???? 0_o Ага, именно так, и именно через &amp;ldquo;ё&amp;rdquo;, ибо хоть одна из главных &amp;quot;фишек&amp;quot; React'а по сравнению с Angular &amp;amp; Vue, это возможность достаточно тонко управлять процессом рендеринга UI в Web-Приложении, но по опыту выходит примерно вот как:</description><content>&lt;hr>
&lt;h2 id="оффтоп">Оффтоп&lt;/h2>
&lt;p>Крутые-модные-молодежные &lt;em>Svelte&amp;rsquo;ы&lt;/em>, &lt;em>Solid&amp;rsquo;ы&lt;/em>, &lt;em>Qwik&amp;rsquo;и&lt;/em> и прочее
сегодня не рассматриваем, ибо каждый из них топит за свою идеологию и способ
работы.&lt;/p>
&lt;p>Мы тут сегодня про &amp;ldquo;старпёров&amp;rdquo;
(&lt;em>слышит голос вдалеке&lt;/em>: &amp;ldquo;Ма, неси таблетки, деда снова накрыло&amp;rdquo;)&lt;/p>
&lt;hr>
&lt;h2 id="про-что-поговорим">Про что поговорим?&lt;/h2>
&lt;p>Про &lt;code>ЁПТИМИЗАЦИЮ&lt;/code>
(автор хотел, правда хотел написать правильно, но не сдержался)&lt;/p>
&lt;h2 id="шта-ёптимизация-0_o">Шта? &amp;lsquo;ЁПТИМИЗАЦИЯ&amp;rsquo;???? 0_o&lt;/h2>
&lt;p>Ага, именно так, и именно через &amp;ldquo;ё&amp;rdquo;, ибо хоть
&lt;code>одна из&lt;/code> главных &lt;code>&amp;quot;фишек&amp;quot; React'а&lt;/code> по сравнению с &lt;em>Angular&lt;/em> &amp;amp; &lt;em>Vue&lt;/em>,
&lt;code>это возможность&lt;/code> достаточно &lt;code>тонко управлять процессом рендеринга&lt;/code>
UI в Web-Приложении, но по опыту выходит примерно вот как:&lt;/p>
&lt;p>Покуда не &amp;ldquo;съел на этом собаку&amp;rdquo;, можно не раз и ДАЛЕКО не два выстрелить себе
в колено
&lt;del>
хотя не, о чём это я.
Тут жеж все "тру-JS-developer'ы", а не "framework'щики" какие-то, как я (плачет)
&lt;/del>
&lt;/p>
&lt;hr>
&lt;p>(Подумав, клеит на React ярлычок &amp;ldquo;Fedora&amp;rdquo;, на Vue - &amp;ldquo;MacOSX Mountain Lion&amp;rdquo;,
а на Angular - &amp;ldquo;Windows 10 for Business&amp;rdquo;)&lt;/p>
&lt;h2 id="спектакль-в-2-действиях">Спектакль в 2 действиях&lt;/h2>
&lt;p>Давайте представим, что бизнес врывается с ноги в dev-team чат, и такой:&lt;/p>
&lt;ul>
&lt;li>(Б - Бизнес) НАМ нужен ДАШБОРД!&lt;/li>
&lt;li>(Р - Какой-то разраб) Ну ок, нужен и нужен. (косит под дурака) Мы-то тут причём??&lt;/li>
&lt;li>(Л - ТехЛид) А накиньте контекста: что хотите показывать, для кого делаем, что по эстимейтам, &amp;hellip;?&lt;/li>
&lt;li>(Б) Большой ДАШБОРД! Чтобы там как только мы в админке что-то поменяли, сразу
рисовалось тут! И чтобы графики моментально были! Столбчатые! Нет, даже Ленточные!
Даже оба сразу, и чтобы не лагало! Вообще! Сделаете???&lt;/li>
&lt;li>(Л) Ну, в принципе, понятно.
Давайте соберемся на созвон, обсудим возможные риски и приоритеты
в соответствии с уже имеющимися задачами.&lt;/li>
&lt;li>(Б) ОК! Завтра, в течение дня!&lt;/li>
&lt;li>(Л) Ок.&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Бизнес уходит, просыпается &amp;ldquo;мафиозный&amp;rdquo; dev-team&lt;/em>&lt;/p>
&lt;ul>
&lt;li>(Л) Народ, вангую, что нас припашут ваять аналог AgGrid, но чисто свой,
и чтобы с плюшками.&lt;/li>
&lt;li>(Р) А в чём проблема взять AgGrid?&lt;/li>
&lt;li>(Л) Скорее всего, в лицензии, ибо тут бизнес, возможно, захочет собирать
стату по какому-то внутреннему проекту, у которого бюджета - что кот наплакал.
Ну или просто показать CEO с СТО, за что мы свой хлеб едим. Андрюха?&lt;/li>
&lt;li>(А - Андрюха) (отвлекается от просмотра боя в Dear Or Alive: Paradise) А??&lt;/li>
&lt;li>(Л) Короче, скорее всего в тебя прилетит таска: сваять таблицу, пока просто -
без графиков. Так, чтобы там бодро рисовалось, но чтобы не выжирало батарейку
у ноута в ноль за полминуты. Прям супер производительность пока не нужна, но лучше на начальном
этапе потратить чутка времени на оптимизацию. Потянешь?&lt;/li>
&lt;li>(Р) ОптЕмизацию&lt;/li>
&lt;li>(Л) Ага, спс. Кстати, как там тесты? Написал?&lt;/li>
&lt;li>(Р) (исчез из-за &amp;ldquo;внезапно&amp;rdquo; появившихся проблем с сетью)&lt;/li>
&lt;li>(Л) Так, Андрюх - ты пока поизучай доку по рендерингу реакта, и сделай прототип.
Ну, допустим, с 2000 строк. Чисто &amp;ldquo;Hello, world!&amp;rdquo; в каждой.
Если что - пингуй, я подскажу&lt;/li>
&lt;li>(А) (кивает, но вообще ни в зуб ногой, чё от него хотят, ибо всю ночь гонял в &amp;ldquo;танки&amp;rdquo;)
Ага, принял. Сделаю&lt;/li>
&lt;li>(Л) Ну и ладушки. Поехали&lt;/li>
&lt;/ul>
&lt;h2 id="код-в-студию">Код в студию!&lt;/h2>
&lt;p>А теперь давайте немного о суровом, кодерском.&lt;/p>
&lt;p>Допустим, условный &amp;ldquo;Андрюха&amp;rdquo; проспался, и прямо перед дейликом накидал
что-то подобное:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// types/table.d.ts
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">declare&lt;/span> &lt;span style="color:#66d9ef">namespace&lt;/span> &lt;span style="color:#a6e22e">NDataTable&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">IDataTable&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">columng&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rows&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">NDataTable&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#66d9ef">namespace&lt;/span> &lt;span style="color:#a6e22e">AppTypes&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// TableComponent/types.d.ts
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HTMLAttributes&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">IProps&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Partial&lt;/span>&amp;lt;&lt;span style="color:#f92672">HTMLAttributes&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">HTMLDivElement&lt;/span>&amp;gt;&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">header&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">data&lt;/span>: &lt;span style="color:#66d9ef">AppTypes.IDataTable&lt;/span>[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-tsx" data-lang="tsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// TableComponent/index.tsx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">memo&lt;/span>, &lt;span style="color:#a6e22e">lazy&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#66d9ef">type&lt;/span> { &lt;span style="color:#a6e22e">IProps&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;./types&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">TableComponent&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">header&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...&lt;span style="color:#a6e22e">divAttrs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Readonly&lt;/span>&amp;lt;&lt;span style="color:#f92672">IProps&lt;/span>&amp;gt;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">computedTableColumnRows&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">useCallback&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rows&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">rows&lt;/span>.&lt;span style="color:#a6e22e">map&lt;/span>((&lt;span style="color:#a6e22e">row&lt;/span>, &lt;span style="color:#a6e22e">idx&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">className&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;table__body__column__row&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">key&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">idx&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">-row`&lt;/span>}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">row&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">data&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">computedTableBody&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">useMemo&lt;/span>(() &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">className&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;table__body__no-data&amp;#34;&lt;/span>&amp;gt;&lt;span style="color:#a6e22e">No&lt;/span> &lt;span style="color:#a6e22e">Data&lt;/span>&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">map&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">className&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;table__body__column__header&amp;#34;&lt;/span>&amp;gt;{&lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">column&lt;/span>}&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">computedTableColumnRows&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">rows&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ))}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, [&lt;span style="color:#a6e22e">data&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> {&lt;span style="color:#a6e22e">...divAttrs&lt;/span>}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">className&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;table__header&amp;#34;&lt;/span>&amp;gt;{&lt;span style="color:#a6e22e">header&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Default table name&amp;#34;&lt;/span>}&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">className&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;table__body&amp;#34;&lt;/span>&amp;gt;{&lt;span style="color:#a6e22e">computedTableBody&lt;/span>}&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">TableComponent&lt;/span>.&lt;span style="color:#a6e22e">Variants&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Memoized&lt;/span>: &lt;span style="color:#66d9ef">memo&lt;/span>(&lt;span style="color:#a6e22e">TableComponent&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Async&lt;/span>: &lt;span style="color:#66d9ef">lazy&lt;/span>(() &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">import&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AsyncMemoized&lt;/span>: &lt;span style="color:#66d9ef">memo&lt;/span>(&lt;span style="color:#a6e22e">lazy&lt;/span>(() &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">import&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> &lt;span style="color:#a6e22e">TableComponent&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-tsx" data-lang="tsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// HomePage/index.tsx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">useState&lt;/span>, &lt;span style="color:#a6e22e">useEffect&lt;/span>, &lt;span style="color:#a6e22e">Dispatch&lt;/span>, &lt;span style="color:#a6e22e">SetStateAction&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">rows&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Array(&lt;span style="color:#ae81ff">500&lt;/span>).&lt;span style="color:#a6e22e">fill&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello, Data Table World!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">_mockDataTable&lt;/span>: &lt;span style="color:#66d9ef">AppTypes.IDataTable&lt;/span>[] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Array(&lt;span style="color:#ae81ff">5&lt;/span>).&lt;span style="color:#a6e22e">fill&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">column&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Some column header&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rows&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">HomePage&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">JSX&lt;/span>.&lt;span style="color:#a6e22e">Element&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> [&lt;span style="color:#a6e22e">data&lt;/span>, &lt;span style="color:#a6e22e">setData&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Record&lt;/span>&amp;lt;&lt;span style="color:#f92672">String&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#a6e22e">unknown&lt;/span>&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Dispatch&lt;/span>&amp;lt;&lt;span style="color:#f92672">SetStateAction&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">Record&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">string&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#a6e22e">unknown&lt;/span>&amp;gt;&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">useState&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO Better move to separate hook
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">useEffect&lt;/span>(() &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> { &lt;span style="color:#a6e22e">abort&lt;/span>, &lt;span style="color:#a6e22e">signal&lt;/span> } &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">AbortContoller&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">process&lt;/span>.&lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">REACT_APP_API_URL&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/some-endpoint`&lt;/span>, { &lt;span style="color:#a6e22e">signal&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setState&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#66d9ef">catch&lt;/span>(&lt;span style="color:#a6e22e">error&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">error&lt;/span>(&lt;span style="color:#a6e22e">error&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> () &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">abort&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, []);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">SomeParentComponent&lt;/span> &lt;span style="color:#a6e22e">data&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">data&lt;/span>}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">TableComponent&lt;/span> &lt;span style="color:#a6e22e">data&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">_mockDataTable&lt;/span>} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">SomeParentComponent&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="нифига-не-понятно-но-уже-чутка-интересно-_">Нифига не понятно, но уже чутка интересно ^_^&lt;/h3>
&lt;p>Ладно-ладно, сек. Ща всё расскажу и покажу. Начнем с &amp;ldquo;фишечек&amp;rdquo;, а точнее - с хуков.&lt;/p>
&lt;p>&lt;code>useMemo&lt;/code>|&lt;code>useCallback&lt;/code>
внутри компонента &amp;ldquo;TableComponent.tsx&amp;rdquo;
&lt;code>&amp;quot;наблюдают&amp;quot; за необходимыми им значениями, и запускают перерисовку&lt;/code>
только в 2 случаях:&lt;/p>
&lt;ul>
&lt;li>ЕСЛИ изменились значения у наблюдаемых в каждом конкретном хуке полей
&lt;del>
надеюсь вы знаете, что объекты сюда класть почти бессмысленно?
&lt;/del>
&lt;/li>
&lt;li>ЕСЛИ будет будет перерисован РОДИТЕЛЬСКИЙ (SomeParentComponent) компонент&lt;/li>
&lt;/ul>
&lt;p>Собсна, резко и дерзко проникаем в вашу Любимую
&lt;del>
IDE, ребзи, IDE!. Надо работу работать, а не вот это вот всё
&lt;/del>
,
и видим следующее:&lt;/p>
&lt;h4 id="оффтоп-1">Оффтоп&lt;/h4>
&lt;hr>
&lt;p>Что это?
&lt;code>Это&lt;/code> просто &lt;code>один из способов добавления новых свойств компоненту, в простонародье - DotNotation&lt;/code>.
Не каждому зайдет, но я, как только распробовал, влюбился
(ибо в больших проектах, простите, за***шься бегать по 20+ файлам,
дабы проверить - это Асинхронный, Мемоизированный, или еще какой-то вариант Компонента.
Тут, на мой вкус, нагляднее: &lt;code>&amp;lt;TableComponent.Memoized /&amp;gt;&lt;/code> | &lt;code>&amp;lt;TableComponent.Async /&amp;gt;&lt;/code>
или вообще &amp;ldquo;чистый&amp;rdquo; &lt;code>&amp;lt;TableComponent /&amp;gt;&lt;/code>. У - Удобно).&lt;/p>
&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-tsx" data-lang="tsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">TableComponent&lt;/span>.&lt;span style="color:#a6e22e">Variants&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Memoized&lt;/span>: &lt;span style="color:#66d9ef">memo&lt;/span>(&lt;span style="color:#a6e22e">TableComponent&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Async&lt;/span>: &lt;span style="color:#66d9ef">lazy&lt;/span>(() &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">import&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AsyncMemoized&lt;/span>: &lt;span style="color:#66d9ef">memo&lt;/span>(&lt;span style="color:#a6e22e">lazy&lt;/span>(() &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">import&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Итак, что тут интересного? &lt;code>Поля &amp;quot;Memoized&amp;quot;&lt;/code> и, может, &lt;code>&amp;quot;AsyncMemoized&amp;quot;&lt;/code>.&lt;/p>
&lt;p>Давайте чисто &amp;ldquo;по верхам&amp;rdquo;:
&amp;ldquo;memo&amp;rdquo; заставляет React проводить глубокое сравнение свойств компонента,
предотвращая излишние перерисовки. (Закрывает наше 2 ИЛИ)&lt;/p>
&lt;p>Пока забудем про
&lt;a
href="https://attardi.org/why-we-memo-all-the-things/"
target="_blank" rel="noopener"
>
кучу нюансов
&lt;/a>
,
ибо на текущем этапе это позволит нам сделать главное:&lt;/p>
&lt;p>Вообще &amp;ldquo;на изи&amp;rdquo; пролететь код-ревью (А вы о чём подумали? 0_o)&lt;/p>
&lt;h3 id="и-всё-таки-про-мемоизацию">И всё-таки, про мемоизацию&amp;hellip;&lt;/h3>
&lt;p>Так, как только прошли код-ревью, давайте вернемся &amp;ldquo;к нашим баранам&amp;rdquo;, а точнее:
к перерисовке при изменении родителя (&amp;quot;&amp;lt;SomeParentComponent /&amp;gt;&amp;quot;)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-tsx" data-lang="tsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// HomePage/index.tsx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">SomeParentComponent&lt;/span> &lt;span style="color:#a6e22e">data&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">data&lt;/span>}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">TableComponent.Memoized&lt;/span> &lt;span style="color:#a6e22e">data&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">_mockDataTable&lt;/span>} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">SomeParentComponent&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Таким нехитрым приёмом, вы с какой-то степенью уверенности сможете сказать:
&amp;ldquo;Я сделяль!&amp;rdquo;, и вам даже не будет стыдно
&lt;del>
но это не точно
&lt;/del>
&lt;/p>
&lt;p>Причина такой самоуверенности в том, что, как бы, мы выполнили задание лида:&lt;/p>
&lt;ul>
&lt;li>Таблица есть? Есть&lt;/li>
&lt;li>+\- 2000 строк в ней есть? Ну, если считать с колонками, то да, есть!&lt;/li>
&lt;li>Тут есть какая-то базовая оптимизация? Есть&lt;/li>
&lt;li>Батарейку при текущем решении мы поберегли? Ну, не сказать, что прям сильно, но
да, вполне&lt;/li>
&lt;/ul>
&lt;h2 id="вместо-заключения">Вместо заключения&lt;/h2>
&lt;p>Текущий пост не преследовал цели быть &amp;ldquo;супер-мега-всеобъемлющим&amp;rdquo; руководством
по оптимизации компонентов.&lt;/p>
&lt;p>Скорее, это был около рабочий пример из давнего-давнего проекта, на котором
хотелось показать возможные решения не всегда &amp;ldquo;подсвечиваемых&amp;rdquo; проблем,
которые возникают при разработке на React&amp;rsquo;е
(Да-да, Vue - я на тебя смотрю. Готовься, ты следующий)&lt;/p></content></item><item><title>Мозги на прокачку: безопасники, XSS и при чем тут формочки</title><link>https://oneeyed1366.github.io/blog/posts/2022-10-10-js-interviews-1/</link><pubDate>Mon, 10 Oct 2022 08:52:39 +0300</pubDate><guid>https://oneeyed1366.github.io/blog/posts/2022-10-10-js-interviews-1/</guid><description>Что? XSS - это термин, описывающий вредоносный скриптинг на сайте путем внедрения JavaScript кода в тех частях пользовательского интерфейса, которые предварительно не проверяются разработчиком
Как? Это возможно из-за особенностей работы JS движков внутри браузера.
Если точнее, то движок, по сути, парсит скрипты из обычного текста, а значит - ему до фонаря, откуда этот скрипт появился.
А поточнее? Идея заключается в том, чтобы обходными путями добавить в приложение код, который изначально не был предусмотрен разработчиками.</description><content>&lt;h2 id="что">Что?&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>XSS&lt;/code> - это термин, описывающий вредоносный скриптинг на сайте
путем &lt;code>внедрения JavaScript&lt;/code> кода в тех частях пользовательского интерфейса,
которые предварительно &lt;code>не проверяются разработчиком&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h2 id="как">Как?&lt;/h2>
&lt;p>Это &lt;code>возможно из-за особенностей работы JS движков внутри браузера&lt;/code>.&lt;/p>
&lt;p>Если точнее, то &lt;code>движок&lt;/code>, по сути, &lt;code>парсит скрипты из обычного текста&lt;/code>, а значит -
ему до фонаря, откуда этот скрипт появился.&lt;/p>
&lt;h2 id="а-поточнее">А поточнее?&lt;/h2>
&lt;p>Идея заключается в том, чтобы обходными путями добавить в приложение код,
который изначально не был предусмотрен разработчиками.&lt;/p>
&lt;h3 id="допустим-через-_ссылки_">Допустим, через &lt;em>ссылки&lt;/em>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">unsecuredInputId&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;unsecured-input_id&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/** @type {[string, (data: string) =&amp;gt; void]} */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> [&lt;span style="color:#a6e22e">state&lt;/span>, &lt;span style="color:#a6e22e">setState&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">useState&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">onInputChange&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">el&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setState&lt;/span>(&lt;span style="color:#a6e22e">el&lt;/span>.&lt;span style="color:#a6e22e">target&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">className&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;someClassName&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">htmlFor&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">unsecuredInputId&lt;/span>}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">unsecuredInputId&lt;/span>} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">state&lt;/span>} &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;socialMediaLink&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Social&lt;/span> &lt;span style="color:#a6e22e">Media&lt;/span> &lt;span style="color:#a6e22e">Link&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="и-шо-ж-в-этом-плохого">И шо-ж в этом плохого??&lt;/h4>
&lt;p>Допустим, &lt;code>кулХацкер&lt;/code> введёт в радостно отрисованный ему input вот такую конструкцию
(&amp;ldquo;Cовершенно случайно&amp;rdquo;)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">javascript&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello, Hacker World!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>В таком случае, после ввода данных может оказаться неприятная ситуация:&lt;/p>
&lt;ol>
&lt;li>&lt;code>кулХацкер&lt;/code> создал профиль с вот такой ссылкой (например, якобы на аккаунт ВК)&lt;/li>
&lt;li>&lt;code>Невинный пользователь&lt;/code>, который хочет в личном письме высказать кулХацкеру, где он не прав,
ничего не подозревая тыкает, докустим, на иконку, дабы перейти по ссылке&lt;/li>
&lt;li>Вместо заветной странички обидчика, недоумевающий пользователь &lt;code>видит alert&lt;/code>
с сообщением &amp;ldquo;Hello, Hacker World&amp;rdquo;.&lt;/li>
&lt;/ol>
&lt;p>Готово, вы великолепны (и, собсна, уволены)&lt;/p>
&lt;h3 id="допустим-через-_dangerouslysetinnerhtml_">Допустим, через &lt;em>dangerouslySetInnerHTML&lt;/em>&lt;/h3>
&lt;h4 id="оффтоп">Оффтоп&lt;/h4>
&lt;p>Видел в паре проектов выставление иконок таким способом, особеннно -
если они получались откуда-то с сервера, и потом парсились в текст.&lt;/p>
&lt;p>Если &lt;code>Вы&lt;/code> с таким &lt;code>не сталкивались&lt;/code> - &lt;code>круто&lt;/code>, вам повезло.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/** @type {[string, (data: string) =&amp;gt; void]} */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> [&lt;span style="color:#a6e22e">innerHtml&lt;/span>, &lt;span style="color:#a6e22e">setInnerHtml&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">useState&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">onGetSvgFromApi&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">axios&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#a6e22e">process&lt;/span>.&lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">REACT_APP_API_URL&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/some-endpoint&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">then&lt;/span>(({ &lt;span style="color:#a6e22e">data&lt;/span> }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setInnerHtml&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#66d9ef">catch&lt;/span>(&lt;span style="color:#a6e22e">error&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">error&lt;/span>(&lt;span style="color:#a6e22e">error&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">className&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;someClassName&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;button&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">onClick&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">onGetSvgFromApi&lt;/span>}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Получить&lt;/span> &lt;span style="color:#a6e22e">SVG&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">иконку&lt;/span> &lt;span style="color:#a6e22e">с&lt;/span> &lt;span style="color:#a6e22e">сервера&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">button&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;some-social-media-container&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dangerouslySetInnerHTML&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{{ &lt;span style="color:#a6e22e">__html&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">innerHtml&lt;/span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="и-шо-ж-в-этом-плохого-1">И шо-ж в этом плохого??&lt;/h4>
&lt;p>Допустим, &lt;code>кулХацкер №2&lt;/code> (поскольку у вас &lt;code>нет SSL сертификата&lt;/code>) как &lt;code>man-in-the-middle&lt;/code>
перехватил данные, которые летят с вашего сервака, и теперь &lt;code>шлёт&lt;/code> в ответе
&lt;code>не SVG'шку&lt;/code>, а&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello, Hacker World!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>При таком раскладе, поскольку вы &lt;code>используете dangerouslySetInnerHTML&lt;/code>,
то браузер превратит этот ответ в элемент DOM-дерева, а значит - Пам-Пам.&lt;/p>
&lt;p>Да-да, все верно. &lt;code>JavaScript движок&lt;/code>, увидя не обработанный скрипт,
&lt;code>со спокойной браузерной душой выполнит все&lt;/code>, что отправил ему &lt;code>кулХацкер №2&lt;/code>&lt;/p>
&lt;p>Итог? Вы очешуенны (и снова уволены)&lt;/p>
&lt;h2 id="вредные-советы">Вредные советы&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Никогда не &lt;code>ВАЛИДИРУЙТЕ&lt;/code> то, &lt;code>ЧТО ВВОДИТ ПОЛЬЗОВАТЕЛЬ&lt;/code>. Серьезно,
нафига тратить время на такую глупую штуку, когда можно по****ить
на себя в зеркале?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Никогда не &lt;code>УСТАНАВЛИВАЙТЕ SSL-СЕРТИФИКАТ&lt;/code>, ибо нафига - у вас же User
никогда ничего в Web-Приложухе не делает. Так зачем заморачиваться??&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Никогда не &lt;code>СЛЕДИТЕ ЗА dangerouslySetInnerHTML&lt;/code>, ибо - нафига?
Все работает-же, значит можно заняться более важными делами (например из &lt;code>ПУНКТА №1&lt;/code>)&lt;/p>
&lt;/li>
&lt;/ol></content></item><item><title>По поводу тестирования...</title><link>https://oneeyed1366.github.io/blog/posts/2022-10-07-thoughts-about-tests/</link><pubDate>Fri, 07 Oct 2022 18:05:41 +0300</pubDate><guid>https://oneeyed1366.github.io/blog/posts/2022-10-07-thoughts-about-tests/</guid><description>Тесты есть? А если найду?? Рано или поздно каждый разраб слышит фразу: &amp;ldquo;Хороший код должен быть покрыт тестами&amp;rdquo;. И вроде бы все логично: чем сложнее приложение, тем сложнее контролировать все его нюансы и взаимосвязи.
Значит, нужно &amp;ldquo;научить&amp;rdquo; какого-то исполнителя в вакууме тестировать то, что ты (или не ты) написал в своем СУПЕР-МЕГА-ПРИЛОЖЕНИИ-ЗА-ОВЕР-ДОХРЕНА-ДЕНЕГ-В-НАНОСЕКУНДУ!
Ниже бегло рассмотрим пару-тройку сходу пришедших на ум инструментов (ибо разрабы, будучи людьми прогрессивными &amp;mdash;читать _ЛЕНИВЫМИ_&amp;mdash; уже придумали довольно много инструментов, которые позволяют эту проблему решить.</description><content>&lt;h2 id="тесты-есть-а-если-найду">Тесты есть? А если найду??&lt;/h2>
&lt;p>Рано или поздно каждый разраб слышит фразу: &amp;ldquo;Хороший код должен быть покрыт тестами&amp;rdquo;.
И вроде бы все логично: чем сложнее приложение, тем сложнее контролировать все его нюансы и взаимосвязи.&lt;/p>
&lt;p>Значит, нужно &amp;ldquo;научить&amp;rdquo; какого-то исполнителя в вакууме тестировать то, что ты (или не ты)
написал в своем СУПЕР-МЕГА-ПРИЛОЖЕНИИ-ЗА-ОВЕР-ДОХРЕНА-ДЕНЕГ-В-НАНОСЕКУНДУ!&lt;/p>
&lt;p>Ниже бегло рассмотрим пару-тройку сходу пришедших на ум инструментов
(ибо разрабы, будучи людьми &lt;code>прогрессивными&lt;/code> &amp;mdash;читать &lt;code>_ЛЕНИВЫМИ_&lt;/code>&amp;mdash; уже придумали довольно
много инструментов, которые позволяют эту проблему решить.)&lt;/p>
&lt;h3 id="список-костылей-карл-кос-ты-лей-инструментов-навскидку">Список (&lt;strong>Костылей, Карл. КОС-ТЫ-ЛЕЙ&lt;/strong>) инструментов, навскидку&lt;/h3>
&lt;h4 id="jesthttpsjestjsio">&lt;a
href="https://jestjs.io/"
target="_blank" rel="noopener"
>
Jest
&lt;/a>
&lt;/h4>
&lt;p>Являясь одним из самых популярных инструментов для тестирования, негласно считается
&amp;ldquo;королем&amp;rdquo; среди Enterprise-приложений (но это не точно)
Применяется как для &lt;code>Unit&lt;/code>, так и для &lt;code>Component&lt;/code> тестирования.
Можно применять и для &lt;code>Интеграционного&lt;/code> тестирования, но там уже &lt;code>немножко больно&lt;/code>&lt;/p>
&lt;p>(
Ловит въетнамские флэшбэки и вспоминает проекты, которые делали &lt;em>E2E&lt;/em> тесты на Jest&amp;rsquo;e&amp;hellip;
&lt;strong>Автор ушел пить кофе и рефлексировать, что раньше код был чище, а трава &amp;ndash; зеленей&lt;/strong>
)&lt;/p>
&lt;p>Плюсы:&lt;/p>
&lt;ul>
&lt;li>Легче интергрируется с &lt;a
href="https://testing-library.com/docs/react-testing-library/intro/"
target="_blank" rel="noopener"
>
React-testing-library
&lt;/a>
&lt;/li>
&lt;li>Хорошая дока, которая позволит тебе в моменте посмотреть, где и что ты не туда запихал&lt;/li>
&lt;li>Jest - лапочка, который легко и непринужденно вливается в любой проект (Не то, что я. &lt;em>ПЛАЧЕТ&lt;/em>)&lt;/li>
&lt;li>Довольно шустро крутит (твои планы на пятничный вечер) все, что ты в него запихаешь&lt;/li>
&lt;li>Имеет богатую экосистему плагинов и расширений практически* под любой framework&lt;/li>
&lt;/ul>
&lt;p>Минусы:&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;Шаг влево\вправо - расстрел&amp;rdquo;
(иногда банально настроить &lt;em>pre-commit&lt;/em> - целый квест со случайно выпадающими гачи-микс сценами)&lt;/li>
&lt;li>Е**нутая логика итерации по массиву&lt;/li>
&lt;li>Залез в конфиги - пеняй на себя (особенно, если ты вообще не сечёшь, что и НАФИГА ты делаешь)&lt;/li>
&lt;/ul>
&lt;h4 id="mochahttpsmochajsorg--chaihttpswwwchaijscom">&lt;a
href="https://mochajs.org/"
target="_blank" rel="noopener"
>
Mocha
&lt;/a>
+ &lt;a
href="https://www.chaijs.com/"
target="_blank" rel="noopener"
>
Chai
&lt;/a>
&lt;/h4>
&lt;p>&amp;ldquo;Бонни и Клайд&amp;rdquo; в мире тестирования Web SPA приложений.
Долго и упорно наступают на пятки &amp;ldquo;мастодонту&amp;rdquo; в лице Jest&amp;rsquo;а.&lt;/p>
&lt;p>Применяются также для &lt;code>Unit&lt;/code>, &lt;code>Component&lt;/code> &amp;amp; &lt;code>Интеграционного&lt;/code> тестирования.&lt;/p>
&lt;p>Большой плюс: &lt;em>Интеграционное&lt;/em> тестирование легче масштабируется
(понятный большинству пример: сравните количество boilerplate&amp;rsquo;а у ванильного
&lt;a
href="https://redux.js.org/"
target="_blank" rel="noopener"
>
&lt;em>Redux&lt;/em>
&lt;/a>
&amp;amp;
&lt;a
href="https://mobx.js.org/"
target="_blank" rel="noopener"
>
&lt;em>MobX&lt;/em>
&lt;/a>
&lt;/p>
&lt;p>Плюсы:&lt;/p>
&lt;ul>
&lt;li>Вроде как легче интегрироваться с экосистемой Vue2
(за 3 версию не скажу, ибо щупал, но поверхностно)&lt;/li>
&lt;li>Легче Jest&amp;rsquo;а, и имеет чуть более читабельный синтаксис
(сугубо на вкус Автора)&lt;/li>
&lt;li>На удивление шустрые ребята, которые могут сэкономить вам 2-3 секунды суровой
кодерской жизни (&amp;ldquo;Плюсовики&amp;rdquo; дружно одобряют)&lt;/li>
&lt;li>Также богатая экосистема позволяет превратить эту почти невинную парочку
в адский комбайн, который будет тестировать всё, вся, и в первую очередь
нервы вашего ПМ&amp;rsquo;а
(
когда его в 100500 раз вызовут на ковер с целью объяснить,
нахрена вы потратили 2 спринта &amp;ldquo;на увеличение отказоустойчивости приложения&amp;rdquo;,
если пришел очередной &amp;ldquo;chaotic-джун&amp;rdquo; и уронил production
)&lt;/li>
&lt;/ul>
&lt;p>Минусы:&lt;/p>
&lt;ul>
&lt;li>Angular? Не, не слышал *^-^*&lt;/li>
&lt;li>Подробная, но чутка переусложненная дока может вогнать в ступор,
а сразу после в неистовейшее ЖЕЛАНИЕ пойти поиграть с Jest&amp;rsquo;ом&lt;/li>
&lt;li>При обвешивании плагинами, становятся тяжелее Jest&amp;rsquo;а&lt;/li>
&lt;li>Mocha без Chai, что Нацу без Хэппи. Жить можно, но грустно.
(Да и, как-бы, НАФИГА?!)&lt;/li>
&lt;/ul>
&lt;h4 id="cypresshttpsdocscypressioguidesoverviewwhy-cypresswhat-you-ll-learn">&lt;a
href="https://docs.cypress.io/guides/overview/why-cypress#What-you-ll-learn"
target="_blank" rel="noopener"
>
Cypress
&lt;/a>
&lt;/h4>
&lt;p>&amp;ldquo;И вот, на 3 день!..&amp;rdquo;
Ладно-ладно, интригу нагнал, теперь можно и пояснить.&lt;/p>
&lt;p>Плюсы:&lt;/p>
&lt;ul>
&lt;li>Одно слово: ДОКА. Почитай, ты все поймешь&lt;/li>
&lt;li>&amp;ldquo;Клёвый, модный, молодежный&amp;rdquo; инструмент, который хочет привнести в этот серый и скучный
мир QA немножко удобства и магии (&amp;ldquo;Плюсовики&amp;rdquo; дружно сделали страшную морду).&lt;/li>
&lt;li>Почти безупречно подходит для большинства DEV QA сценариев
(у матерых QA&amp;rsquo;щиков уже свой, потом и кровью выстраданный набор &amp;ldquo;костылей&amp;rdquo;),
часто используется для &lt;code>Component&lt;/code>, &lt;code>Интеграционного&lt;/code> &amp;amp; &lt;code>E2E&lt;/code> тестирования.&lt;/li>
&lt;li>Из коробки (с какой-то бородатой версии) дает тебе красивый и, что важнее,
ТЫКАТЕЛЬНЫЙ UI, которым просто пользоваться.&lt;/li>
&lt;li>Если ты (как и я) странный человек, который использует форки Chromium&amp;rsquo;а,
то для таких &amp;ldquo;одаренных&amp;rdquo; тут также есть &lt;code>Electron&lt;/code>, для прогона тестов внутри него.
У-Удобно&lt;/li>
&lt;/ul>
&lt;p>Минусы:&lt;/p>
&lt;ul>
&lt;li>Тяжелый, перед первым запуском, по сути, &lt;code>требует установки отдельного Cypress приложения&lt;/code>&lt;/li>
&lt;li>Тяжело вливается в &lt;em>Unit&lt;/em> тестирование (хотя может)&lt;/li>
&lt;li>В зависимости от framework&amp;rsquo;а, при &lt;em>Component&lt;/em> тестироовании можно не раз (и нифига не два)
стабильно стрелять себе в колено. Не из дробовика, но все же&lt;/li>
&lt;li>Имеет свой, &amp;ldquo;Chai-подобный&amp;rdquo; синтаксис, что усложняет переезд на него (в случае необходимости)&lt;/li>
&lt;li>jQuery! Напугал? Это хорошо, ибо бывают сценарии, когда он НУЖОН.&lt;/li>
&lt;/ul>
&lt;h2 id="интересная-штучка-но-есть-ли-у-неё-практическое-применение">&amp;ldquo;Интересная штучка, но есть-ли у неё практическое применение?&amp;rdquo;&lt;/h2>
&lt;p>Итак, мы бегло посмотрели на &amp;ldquo;главных игроков&amp;rdquo; QA-рынка
(в моих бредовых фантазиях. Да-да, санитары уже выехали),
но раз инструменты - есть, потребность - есть, то почему все эти
&lt;a
href="https://habr.com/ru/company/ruvds/blog/450316/"
target="_blank" rel="noopener"
>
TDD
&lt;/a>
,
&lt;a
href="https://ru.wikipedia.org/wiki/BDD_%28%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%29"
target="_blank" rel="noopener"
>
BDD
&lt;/a>
и прочее еще не стали мейнстримом?&lt;/p>
&lt;p>(Оффтоп: если стало - сорян, автор в танке и пошел выпить &lt;em>йаду&lt;/em>. Дальше лучше не читать)&lt;/p>
&lt;p>По моему опыту, проблема всегда плюс-минус одна: &lt;strong>ДОРОГО&lt;/strong>.&lt;/p>
&lt;h3 id="почему-дорого">Почему дорого?&lt;/h3>
&lt;p>Потому что бизнес не очень любит кидаться в людей деньгами (ВНЕЗАПНО!),
и для него &lt;strong>оптимизация&lt;/strong> - слово покруче, чем &lt;strong>библия&lt;/strong> для верующего.&lt;/p>
&lt;p>(Мой агностик идет разбирацца, где это я таких слов понабрался)&lt;/p>
&lt;p>Если вкратце, то на момент 2K22 разрабы - это дорого, а содержать
команду разрабов - это вообще дофига дорого.
Scrum, Agile, и вот эту вот всю &amp;ldquo;движуху&amp;rdquo; не от хорошей жизни придумали.&lt;/p>
&lt;p>Так а все-таки, почему именно &lt;strong>Дорого?&lt;/strong>&lt;/p>
&lt;p>Потому что писать тесты - долго.
Да, условный Cypress пытается решить эту проблему (в мире Frontend&amp;rsquo;a), но все равно -
бизнес каждый раз оказывается перед выбором:&lt;/p>
&lt;ul>
&lt;li>Сделать новую супер-пупер-свистящую фичу?&lt;/li>
&lt;li>Покрыть приложени тестами?&lt;/li>
&lt;/ul>
&lt;p>Догадайтесь, что выбирают чаще.&lt;/p>
&lt;h2 id="но-ведь-на-дистанции-все-равно-ведь-дешевле-содержать-с-тестами-разве-нет">Но ведь на дистанции все-равно ведь дешевле содержать с тестами, разве нет?&lt;/h2>
&lt;p>Ответ - &lt;strong>безусловно&lt;/strong>, но:&lt;/p>
&lt;ul>
&lt;li>Если эти тесты писал тот, кто УМЕЕТ ПИСАТЬ ТЕСТЫ.&lt;/li>
&lt;li>Если у бизнеса есть на это ДЕНЬГИ&lt;/li>
&lt;/ul>
&lt;p>А теперь, давайте по пунктам:&lt;/p>
&lt;h3 id="что-значит-уметь-писать-тесты">Что значит: уметь писать тесты?&lt;/h3>
&lt;ul>
&lt;li>Тесты замедляют &amp;ldquo;ржавение&amp;rdquo; кода&lt;/li>
&lt;li>Тесты тестируют то, что НАДО тестировать&lt;/li>
&lt;li>Тесты частично снимают с условного Лида задачу по постоянному надзору за &amp;ldquo;chaotic-джунами&amp;rdquo;&lt;/li>
&lt;li>Тесты (с некоторыми ограничениями) выполняют функцию Доки по проекту (для разрабов!)&lt;/li>
&lt;li>Тесты с определенным процентом успеха не пускают кривой код в production (ВНЕЗАПНО №2)&lt;/li>
&lt;/ul>
&lt;h3 id="что-значит-у-бизнеса-есть-на-это-деньги">Что значит: у бизнеса есть на это деньги?&lt;/h3>
&lt;p>Вкратце - то самое и значит.
&amp;ldquo;Кто платит, тот и музыку заказывает&amp;rdquo;, а если инвестор условного стартапа в душе не сечёт,
что и зачем мы там вошкаем как dev-team, то ему с высокой колакольни начхать на всё это &amp;ldquo;ржавение кода на дистанции&amp;rdquo;.&lt;/p>
&lt;p>Для условного инвестора важно ЗАРАБОТАТЬ (ВНЕЗАПНОЕ №3)&lt;/p>
&lt;p>Проблемы начинаются, когда условный стартап перестает быть просто &amp;ldquo;очередным стартапом&amp;rdquo;,
и начинает плавно переходить в категорию &amp;ldquo;продуктовой компании&amp;rdquo;.&lt;/p>
&lt;p>Причина? Привычка.&lt;/p>
&lt;h2 id="привычка">Привычка?&lt;/h2>
&lt;p>Привычка.&lt;/p>
&lt;p>Привычка просто имплементировать фичи, и закрывать 100500 тасок в секунду
(и плевать, что отвалилась регистрация - починим в моменте, раньше же так делали? Делали. Значит, и сейчас сделаем)&lt;/p>
&lt;p>Привычка тестировать продукт силами самой dev-team или product-team
(в редких случаях - силами qa-team),
ведь &amp;ldquo;вы же сами это написали, и вы говорите, что не можете предугадать, как поведет себя продукт?
Я начинаю сомневаться в вашей компетентности&amp;rdquo; (и еще 1000 классных фраз от новоявленного CEO, CTO, whatever&amp;hellip;)&lt;/p>
&lt;h3 id="а-потом---суп-с-котом-0_o-">А потом - суп с котом (0_o ?!)&lt;/h3>
&lt;p>Ладно-ладно, хватит кидаться тапками.
Торжественно клянусь, (&lt;em>что замышляю только шалость&lt;/em>)
что ни одна животинка в ходе написания данного поста не пострадала.
(Комары - не в счёт)&lt;/p>
&lt;p>Суммарно, круг замкнулся. Приложение стало крутым? Стало.&lt;/p>
&lt;p>Приложение разрослось? Разрослось.&lt;/p>
&lt;p>Так а тесты-то где??? А их нету, потому что мы работаем на бизнес (пам-пам),
а бизнесу нужно закрывать отчеты, нанимать персонал, и вот это вот все.&lt;/p>
&lt;h2 id="а-что-в-итоге">А что в итоге?&lt;/h2>
&lt;p>По итогу (и по опыту прошлых компаний), если не было абстрактного &amp;ldquo;единорога&amp;rdquo;,
который бы жестко и бескомпромиссно топил за тесты, то возможны 2 пути:&lt;/p>
&lt;h3 id="андрюха-все-ня-давай-по-новой">&amp;ldquo;Андрюха, все ***ня. Давай по-новой&amp;rdquo;&lt;/h3>
&lt;p>Идея следующая: условного менеджера высшего звена (тут без сарказма: крутые ребята)
настолько задолбало, что ему из каждого утюга звенят:&lt;/p>
&lt;ul>
&lt;li>это плохо работает&lt;/li>
&lt;li>это сделать нельзя,&lt;/li>
&lt;li>этот крутой разраб, для появления которого был призван сам Сатана, ушел и плакал кровавыми слезами,
как только увидел код&lt;/li>
&lt;/ul>
&lt;p>(&lt;strong>накидываем на вентилятор, накидываем, ну же, активнее&lt;/strong>)&lt;/p>
&lt;p>Что он принимает волевое решение: отложить какое-то количество денег на глобальную перепись кода.&lt;/p>
&lt;p>Сразу скажу: мне повезло, и я когда-то попал именно на такой путь именно в такой компании,
а потому четко себе представляю, что там &amp;ldquo;за поворотом&amp;rdquo;.&lt;/p>
&lt;p>Чаще всего, данный путь выбирают, когда бизнес больше не может расти, ибо обслужиание и поддержание
кодовой базы продукта стоит дороже какого-то выставленного потолка.&lt;/p>
&lt;p>Итог: пан или пропал.&lt;/p>
&lt;ul>
&lt;li>ИЛИ Все круто, и мы могучим рывком все сделали красиво&lt;/li>
&lt;li>ИЛИ Простите, п**дец. Переписывание затянулось, бизнес теряет все больше, а конкуренты счастливы.&lt;/li>
&lt;/ul>
&lt;p>О развязке думайте сами.&lt;/p>
&lt;h3 id="мягкая-сила-в-действии">&amp;ldquo;Мягкая сила&amp;rdquo; в действии&lt;/h3>
&lt;p>Идея следующая: под мудрым надзором (&lt;em>Гендальфа&lt;/em>) крутого Лида/Лидов,
начинаются точечные, но конкретные улучшения кода.&lt;/p>
&lt;p>Что-то чистится, что-то выкидывается, что-то просто стабилизируется. Это нормально,
но сразу ремарка - найти лидов, которые могут это стабильно выносить и доносить до
бизнеса ценность - квест похлеще &amp;ldquo;я найду Цири и верну ее домой&amp;rdquo;.&lt;/p>
&lt;p>Обычно, это встраивается в процессы организации, и таким нехитрым финтом
еще сильнее замедляется &amp;ldquo;ржавение кода&amp;rdquo;. Когда-то он все-равно произойдет,
но сейчас - мы тут ржавчину убрали, тут подкрасили, тут костылик подставили - круто,
теперь можно и фичу добавить.&lt;/p>
&lt;p>Итог: эволюция/энволюция (тут как повезет).
Из практики, чаще всего начинают именно этот путь, но вот стабильно ему следуют - единицы.&lt;/p></content></item></channel></rss>