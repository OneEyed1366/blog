<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>frontend on</title><link>https://oneeyed1366.github.io/blog/tags/frontend/</link><description>Recent content in frontend on</description><generator>Hugo -- gohugo.io</generator><language>ru</language><lastBuildDate>Fri, 07 Oct 2022 18:05:41 +0300</lastBuildDate><atom:link href="https://oneeyed1366.github.io/blog/tags/frontend/index.xml" rel="self" type="application/rss+xml"/><item><title>По поводу тестирования...</title><link>https://oneeyed1366.github.io/blog/posts/2022-10-07-thoughts-about-tests/</link><pubDate>Fri, 07 Oct 2022 18:05:41 +0300</pubDate><guid>https://oneeyed1366.github.io/blog/posts/2022-10-07-thoughts-about-tests/</guid><description>Тесты есть? А если найду?? Рано или поздно каждый разраб слышит фразу: &amp;ldquo;Хороший код должен быть покрыт тестами&amp;rdquo;. И вроде бы все логично: чем сложнее приложение, тем сложнее контролировать все его нюансы и взаимосвязи.
Значит, нужно &amp;ldquo;научить&amp;rdquo; какого-то исполнителя в вакууме тестировать то, что ты (или не ты) написал в своем СУПЕР-МЕГА-ПРИЛОЖЕНИИ-ЗА-ОВЕР-ДОХРЕНА-ДЕНЕГ-В-НАНОСЕКУНДУ!
Ниже бегло рассмотрим пару-тройку сходу пришедших на ум инструментов (ибо разрабы, будучи людьми прогрессивными &amp;mdash;читать _ЛЕНИВЫМИ_&amp;mdash; уже придумали довольно много инструментов, которые позволяют эту проблему решить.</description><content>&lt;h2 id="тесты-есть-а-если-найду">Тесты есть? А если найду??&lt;/h2>
&lt;p>Рано или поздно каждый разраб слышит фразу: &amp;ldquo;Хороший код должен быть покрыт тестами&amp;rdquo;.
И вроде бы все логично: чем сложнее приложение, тем сложнее контролировать все его нюансы и взаимосвязи.&lt;/p>
&lt;p>Значит, нужно &amp;ldquo;научить&amp;rdquo; какого-то исполнителя в вакууме тестировать то, что ты (или не ты)
написал в своем СУПЕР-МЕГА-ПРИЛОЖЕНИИ-ЗА-ОВЕР-ДОХРЕНА-ДЕНЕГ-В-НАНОСЕКУНДУ!&lt;/p>
&lt;p>Ниже бегло рассмотрим пару-тройку сходу пришедших на ум инструментов
(ибо разрабы, будучи людьми &lt;code>прогрессивными&lt;/code> &amp;mdash;читать &lt;code>_ЛЕНИВЫМИ_&lt;/code>&amp;mdash; уже придумали довольно
много инструментов, которые позволяют эту проблему решить.)&lt;/p>
&lt;h3 id="список-костылей-карл-кос-ты-лей-инструментов-навскидку">Список (&lt;strong>Костылей, Карл. КОС-ТЫ-ЛЕЙ&lt;/strong>) инструментов, навскидку&lt;/h3>
&lt;h4 id="jesthttpsjestjsio">&lt;a href="https://jestjs.io/">Jest&lt;/a>&lt;/h4>
&lt;p>Являясь одним из самых популярных инструментов для тестирования, негласно считается
&amp;ldquo;королем&amp;rdquo; среди Enterprise-приложений (но это не точно)
Применяется как для &lt;code>Unit&lt;/code>, так и для &lt;code>Component&lt;/code> тестирования.
Можно применять и для &lt;code>Интеграционного&lt;/code> тестирования, но там уже &lt;code>немножко больно&lt;/code>&lt;/p>
&lt;p>(
Ловит въетнамские флэшбэки и вспоминает проекты, которые делали &lt;em>E2E&lt;/em> тесты на Jest&amp;rsquo;e&amp;hellip;
&lt;strong>Автор ушел пить кофе и рефлексировать, что раньше код был чище, а трава &amp;ndash; зеленей&lt;/strong>
)&lt;/p>
&lt;p>Плюсы:&lt;/p>
&lt;ul>
&lt;li>Легче интергрируется с &lt;a href="https://testing-library.com/docs/react-testing-library/intro/">React-testing-library&lt;/a>&lt;/li>
&lt;li>Хорошая дока, которая позволит тебе в моменте посмотреть, где и что ты не туда запихал&lt;/li>
&lt;li>Jest - лапочка, который легко и непринужденно вливается в любой проект (Не то, что я. &lt;em>ПЛАЧЕТ&lt;/em>)&lt;/li>
&lt;li>Довольно шустро крутит (твои планы на пятничный вечер) все, что ты в него запихаешь&lt;/li>
&lt;li>Имеет богатую экосистему плагинов и расширений практически* под любой framework&lt;/li>
&lt;/ul>
&lt;p>Минусы:&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;Шаг влево\вправо - расстрел&amp;rdquo;
(иногда банально настроить &lt;em>pre-commit&lt;/em> - целый квест со случайно выпадающими гачи-микс сценами)&lt;/li>
&lt;li>Е**нутая логика итерации по массиву&lt;/li>
&lt;li>Залез в конфиги - пеняй на себя (особенно, если ты вообще не сечёшь, что и НАФИГА ты делаешь)&lt;/li>
&lt;/ul>
&lt;h4 id="mochahttpsmochajsorg--chaihttpswwwchaijscom">&lt;a href="https://mochajs.org/">Mocha&lt;/a> + &lt;a href="https://www.chaijs.com/">Chai&lt;/a>&lt;/h4>
&lt;p>&amp;ldquo;Бонни и Клайд&amp;rdquo; в мире тестирования Web SPA приложений.
Долго и упорно наступают на пятки &amp;ldquo;мастодонту&amp;rdquo; в лице Jest&amp;rsquo;а.&lt;/p>
&lt;p>Применяются также для &lt;code>Unit&lt;/code>, &lt;code>Component&lt;/code> &amp;amp; &lt;code>Интеграционного&lt;/code> тестирования.&lt;/p>
&lt;p>Большой плюс: &lt;em>Интеграционного&lt;/em> тестирование легче масштабируется
(понятный большинству пример: сравните количество boilerplate&amp;rsquo;а у ванильного
&lt;a href="https://redux.js.org/">&lt;em>Redux&lt;/em>&lt;/a>
&amp;amp;
&lt;a href="https://mobx.js.org/">&lt;em>MobX&lt;/em>&lt;/a>&lt;/p>
&lt;p>Плюсы:&lt;/p>
&lt;ul>
&lt;li>Вроде как легче интегрироваться с экосистемой Vue2
(за 3 версию не скажу, ибо щупал, но поверхностно)&lt;/li>
&lt;li>Легче Jest&amp;rsquo;а, и имеет чуть более читабельный синтаксис
(сугубо на вкус Автора)&lt;/li>
&lt;li>На удивление шустрые ребята, которые могут сэкономить вам 2-3 секунды суровой
кодерской жизни (&amp;ldquo;Плюсовики&amp;rdquo; дружно одобряют)&lt;/li>
&lt;li>Также богатая экосистема позволяет превратить эту почти невинную парочку
в адский комбайн, который будет тестировать всё, вся, и в первую очередь
нервы вашего ПМ&amp;rsquo;а
(
когда его в 100500 раз вызовут на ковер с целью объяснить,
нахрена вы потратили 2 спринта &amp;ldquo;на увеличение отказоустойчивости приложения&amp;rdquo;,
если пришел очередной &amp;ldquo;chaotic-джун&amp;rdquo; и уронил production
)&lt;/li>
&lt;/ul>
&lt;p>Минусы:&lt;/p>
&lt;ul>
&lt;li>Angular? Не, не слышал *^-^*&lt;/li>
&lt;li>Подробная, но чутка переусложненная дока может вогнать в ступор,
а сразу после в неистовейшее ЖЕЛАНИЕ пойти поиграть с Jest&amp;rsquo;ом&lt;/li>
&lt;li>При обвешивании плагинами, становятся тяжелее Jest&amp;rsquo;а&lt;/li>
&lt;li>Mocha без Chai, что Нацу без Хэппи. Жить можно, но грустно.
(Да и, как-бы, НАФИГА?!)&lt;/li>
&lt;/ul>
&lt;h4 id="cypresshttpsdocscypressioguidesoverviewwhy-cypresswhat-you-ll-learn">&lt;a href="https://docs.cypress.io/guides/overview/why-cypress#What-you-ll-learn">Cypress&lt;/a>&lt;/h4>
&lt;p>&amp;ldquo;И вот, на 3 день!..&amp;rdquo;
Ладно-ладно, интригу нагнал, теперь можно и пояснить.&lt;/p>
&lt;p>Плюсы:&lt;/p>
&lt;ul>
&lt;li>Одно слово: ДОКА. Почитай, ты все поймешь&lt;/li>
&lt;li>&amp;ldquo;Клёвый, модный, молодежный&amp;rdquo; инструмент, который хочет привнести в этот серый и скучный
мир QA немножко удобства и магии (&amp;ldquo;Плюсовики&amp;rdquo; дружно сделали страшную морду).&lt;/li>
&lt;li>Почти безупречно подходит для большинства DEV QA сценариев
(у матерых QA&amp;rsquo;щиков уже свой, потом и кровью выстраданный набор &amp;ldquo;костылей&amp;rdquo;),
часто используется для &lt;code>Component&lt;/code>, &lt;code>Интеграционного&lt;/code> &amp;amp; &lt;code>E2E&lt;/code> тестирования.&lt;/li>
&lt;li>Из коробки (с какой-то бородатой версии) дает тебе красивый и, что важнее,
ТЫКАТЕЛЬНЫЙ UI, которым просто пользоваться.&lt;/li>
&lt;li>Если ты (как и я) странный человек, который использует форки Chromium&amp;rsquo;а,
то для таких &amp;ldquo;одаренных&amp;rdquo; тут также есть &lt;code>Electron&lt;/code>, для прогона тестов внутри него.
У-Удобно&lt;/li>
&lt;/ul>
&lt;p>Минусы:&lt;/p>
&lt;ul>
&lt;li>Тяжелый, перед первым запуском, по сути, &lt;code>требует установки отдельного Cypress приложения&lt;/code>&lt;/li>
&lt;li>Тяжело вливается в &lt;em>Unit&lt;/em> тестирование (хотя может)&lt;/li>
&lt;li>В зависимости от framework&amp;rsquo;а, при &lt;em>Component&lt;/em> тестироовании можно не раз (и нифига не два)
стабильно стрелять себе в колено. Не из дробовика, но все же&lt;/li>
&lt;li>Имеет свой, &amp;ldquo;Chai-подобный&amp;rdquo; синтаксис, что усложняет переезд на него (в случае необходимости)&lt;/li>
&lt;li>jQuery! Напугал? Это хорошо, ибо бывают сценарии, когда он НУЖОН.&lt;/li>
&lt;/ul>
&lt;h2 id="интересная-штучка-но-есть-ли-у-неё-практическое-применение">&amp;ldquo;Интересная штучка, но есть-ли у неё практическое применение?&amp;rdquo;&lt;/h2>
&lt;p>Итак, мы бегло посмотрели на &amp;ldquo;главных игроков&amp;rdquo; QA-рынка
(в моих бредовых фантазиях. Да-да, санитары уже выехали),
но раз инструменты - есть, потребность - есть, то почему все эти
&lt;a href="https://habr.com/ru/company/ruvds/blog/450316/">TDD&lt;/a>,
&lt;a href="https://ru.wikipedia.org/wiki/BDD_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)">BDD&lt;/a>
и прочее еще не стали мейнстримом?&lt;/p>
&lt;p>(Оффтоп: если стало - сорян, автор в танке и пошел выпить &lt;em>йаду&lt;/em>. Дальше лучше не читать)&lt;/p>
&lt;p>По моему опыту, проблема всегда плюс-минус одна: &lt;strong>ДОРОГО&lt;/strong>.&lt;/p>
&lt;h3 id="почему-дорого">Почему дорого?&lt;/h3>
&lt;p>Потому что бизнес не очень любит кидаться в людей деньгами (ВНЕЗАПНО!),
и для него &lt;strong>оптимизация&lt;/strong> - слово покруче, чем &lt;strong>библия&lt;/strong> для верующего.&lt;/p>
&lt;p>(Мой агностик идет разбирацца, где это я таких слов понабрался)&lt;/p>
&lt;p>Если вкратце, то на момент 2K22 разрабы - это дорого, а содержать
команду разрабов - это вообще дофига дорого.
Scrum, Agile, и вот эту вот всю &amp;ldquo;движуху&amp;rdquo; не от хорошей жизни придумали.&lt;/p>
&lt;p>Так а все-таки, почему именно &lt;strong>Дорого?&lt;/strong>&lt;/p>
&lt;p>Потому что писать тесты - долго.
Да, условный Cypress пытается решить эту проблему (в мире Frontend&amp;rsquo;a), но все равно -
бизнес каждый раз оказывается перед выбором:&lt;/p>
&lt;ul>
&lt;li>Сделать новую супер-пупер-свистящую фичу?&lt;/li>
&lt;li>Покрыть приложени тестами?&lt;/li>
&lt;/ul>
&lt;p>Догадайтесь, что выбирают чаще.&lt;/p>
&lt;h2 id="но-ведь-на-дистанции-все-равно-ведь-дешевле-содержать-с-тестами-разве-нет">Но ведь на дистанции все-равно ведь дешевле содержать с тестами, разве нет?&lt;/h2>
&lt;p>Ответ - &lt;strong>безусловно&lt;/strong>, но:&lt;/p>
&lt;ul>
&lt;li>Если эти тесты писал тот, кто УМЕЕТ ПИСАТЬ ТЕСТЫ.&lt;/li>
&lt;li>Если у бизнеса есть на это ДЕНЬГИ&lt;/li>
&lt;/ul>
&lt;p>А теперь, давайте по пунктам:&lt;/p>
&lt;h3 id="что-значит-уметь-писать-тесты">Что значит: уметь писать тесты?&lt;/h3>
&lt;ul>
&lt;li>Тесты замедляют &amp;ldquo;ржавение&amp;rdquo; кода&lt;/li>
&lt;li>Тесты тестируют то, что НАДО тестировать&lt;/li>
&lt;li>Тесты частично снимают с условного Лида задачу по постоянному надзору за &amp;ldquo;chaotic-джунами&amp;rdquo;&lt;/li>
&lt;li>Тесты (с некоторыми ограничениями) выполняют функцию Доки по проекту (для разрабов!)&lt;/li>
&lt;li>Тесты с определенным процентом успеха не пускают кривой код в production (ВНЕЗАПНО №2)&lt;/li>
&lt;/ul>
&lt;h3 id="что-значит-у-бизнеса-есть-на-это-деньги">Что значит: у бизнеса есть на это деньги?&lt;/h3>
&lt;p>Вкратце - то самое и значит.
&amp;ldquo;Кто платит, тот и музыку заказывает&amp;rdquo;, а если инвестор условного стартапа в душе не сечёт,
что и зачем мы там вошкаем как dev-team, то ему с высокой калокольни начхать на всё это &amp;ldquo;ржавение кода на дистанции&amp;rdquo;.&lt;/p>
&lt;p>Для условного инвестора важно ЗАРАБОТАТЬ (ВНЕЗАПНОЕ №3)&lt;/p>
&lt;p>Проблемы начинаются, когда условный стартап перестает быть просто &amp;ldquo;очередным стартапом&amp;rdquo;,
и начинает плавно переходить в категорию &amp;ldquo;продуктовой компании&amp;rdquo;.&lt;/p>
&lt;p>Причина? Привычка.&lt;/p>
&lt;h2 id="привычка">Привычка?&lt;/h2>
&lt;p>Привычка.&lt;/p>
&lt;p>Привычка просто имплементировать фичи, и закрывать 100500 тасок в секунду
(и плевать, что отвалилась регистрация - починим в моменте, раньше же так делали? Делали. Значит, и сейчас сделаем)&lt;/p>
&lt;p>Привычка тестировать продукт силами самой dev-team или product-team
(в редких случаях - силами qa-team),
ведь &amp;ldquo;вы же сами это написали, и вы говорите, что не можете предугадать, как поведет себя продукт?
Я начинаю сомневаться в вашей компетентности&amp;rdquo; (и еще 1000 классных фраз от новоявленного CEO, CTO, whatever&amp;hellip;)&lt;/p>
&lt;h3 id="а-потом---суп-с-котом-0_o-">А потом - суп с котом (0_o ?!)&lt;/h3>
&lt;p>Ладно-ладно, хватит кидаться тапками.
Торжественно клянусь, (&lt;em>что замышляю только шалость&lt;/em>)
что ни одна животинка в ходе написания данного поста не пострадала.
(Комары - не в счёт)&lt;/p>
&lt;p>Суммарно, круг замкнулся. Приложение стало крутым? Стало.&lt;/p>
&lt;p>Приложение разрослось? Разрослось.&lt;/p>
&lt;p>Так а тесты-то где??? А их нету, потому что мы работаем на бизнес (пам-пам),
а бизнесу нужно закрывать отчеты, нанимать персонал, и вот это вот все.&lt;/p>
&lt;h2 id="а-что-в-итоге">А что в итоге?&lt;/h2>
&lt;p>По итогу (и по опыту прошлых компаний), если не было абстрактного &amp;ldquo;единорога&amp;rdquo;,
который бы жестко и бескомпромиссно топил за тесты, то возможны 2 пути:&lt;/p>
&lt;h3 id="андрюха-все-ня-давай-по-новой">&amp;ldquo;Андрюха, все ***ня. Давай по-новой&amp;rdquo;&lt;/h3>
&lt;p>Идея следующая: условного менеджера высшего звена (тут без сарказма: крутые ребята)
настолько задолбало, что ему из каждого утюга звенят:&lt;/p>
&lt;ul>
&lt;li>это плохо работает&lt;/li>
&lt;li>это сделать нельзя,&lt;/li>
&lt;li>этот крутой разраб, для появления которого был призван сам Сатана, ушел и плакал кровавыми слезами,
как только увидел код&lt;/li>
&lt;/ul>
&lt;p>(&lt;strong>накидываем на вентилятор, накидываем, ну же, активнее&lt;/strong>)&lt;/p>
&lt;p>Что он принимает волевое решение: отложить какое-то количество денег на глобальную перепись кода.&lt;/p>
&lt;p>Сразу скажу: мне повезло, и я когда-то попал именно на такой путь именно в такой компании,
а потому четко себе представляю, что там &amp;ldquo;за поворотом&amp;rdquo;.&lt;/p>
&lt;p>Чаще всего, данный путь выбирают, когда бизнес больше не может расти, ибо обслужиание и поддержание
кодовой базы продукта стоит дороже какого-то выставленного потолка.&lt;/p>
&lt;p>Итог: пан или пропал.&lt;/p>
&lt;ul>
&lt;li>ИЛИ Все круто, и мы могучим рывком все сделали красиво&lt;/li>
&lt;li>ИЛИ Простите, п**дец. Переписывание затянулось, бизнес теряет все больше, а конкуренты счастливы.&lt;/li>
&lt;/ul>
&lt;p>О развязке думайте сами.&lt;/p>
&lt;h3 id="мягкая-сила-в-действии">&amp;ldquo;Мягкая сила&amp;rdquo; в действии&lt;/h3>
&lt;p>Идея следующая: под мудрым надзором (&lt;em>Гендальфа&lt;/em>) крутого Лида/Лидов,
начинаются точечные, но конкретные улучшения кода.&lt;/p>
&lt;p>Что-то чистится, что-то выкидывается, что-то просто стабилизируется. Это нормально,
но сразу ремарка - найти лидов, которые могут это стабильно выносить и доносить до
бизнеса ценность - квест похлеще &amp;ldquo;я найду Цири и верну ее домой&amp;rdquo;.&lt;/p>
&lt;p>Обычно, это встраивается в процессы организации, и таким нехитрым финтом
еще сильнее замедляется &amp;ldquo;ржавение кода&amp;rdquo;. Когда-то он все-равно произойдет,
но сейчас - мы тут ржавчину убрали, тут подкрасили, тут костылик подставили - круто,
теперь можно и фичу добавить.&lt;/p>
&lt;p>Итог: эволюция/энволюция (тут как повезет).
Из практики, чаще всего начинают именно этот путь, но вот стабильно ему следуют - единицы.&lt;/p></content></item></channel></rss>